{
  "permissions": {
    "allow": [
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/api/APIGateway.integration.test.ts)",
      "Bash(npm run build:*)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/api/AdminEndpoints.integration.test.ts)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/api/Authentication.integration.test.ts)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/api/CodeAnalysis.integration.test.ts)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/api/DocsRoutes.integration.test.ts)",
      "Bash(find:*)",
      "Bash(npm run test:integration:*)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/services/PostgreSQLService.integration.test.ts --reporter=verbose)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/services/KnowledgeGraphService.integration.test.ts)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/services/SecurityScanner.integration.test.ts)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/services --reporter=verbose)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration --reporter=json --no-coverage)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/services/SecurityScanner.integration.test.ts tests/integration/services/DatabaseService.integration.test.ts --reporter=verbose)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration --reporter=tap)",
      "Read(//private/tmp/**)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration --reporter=verbose)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/services/SecurityScanner.integration.test.ts --reporter=verbose)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/services/DatabaseService.integration.test.ts --reporter=verbose)",
      "Bash(redis-cli:*)",
      "Bash(docker exec:*)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/services/BackupService.integration.test.ts --reporter=verbose)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/services/SecurityScanner.integration.test.ts tests/integration/services/KnowledgeGraphService.integration.test.ts --reporter=verbose)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration --reporter=json)",
      "Bash(grep:*)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/services/SecurityScanner.integration.test.ts tests/integration/services/BackupService.integration.test.ts --reporter=verbose)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/models/entities.integration.test.ts --reporter=verbose)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/services/SecurityScanner.integration.test.ts tests/integration/models/entities.integration.test.ts tests/integration/services/DatabaseService.integration.test.ts --reporter=tap)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/models/entities.integration.test.ts --reporter=json)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/services/SecurityScanner.integration.test.ts tests/integration/models/entities.integration.test.ts --reporter=json)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/services/MaintenanceService.integration.test.ts --reporter=verbose)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/services/SynchronizationCoordinator.integration.test.ts --reporter=verbose -t \"should handle invalid file paths gracefully\")",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/services/DatabaseService.integration.test.ts -t \"should perform complex searches across databases\" --reporter=verbose)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/services/DatabaseService.integration.test.ts -t \"should generate analytics and reports\" --reporter=verbose)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/services/DatabaseService.integration.test.ts -t \"should handle large payload operations within limits\" --reporter=verbose)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/services/DatabaseService.integration.test.ts -t \"should handle race conditions in concurrent updates\" --reporter=verbose)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/services/DatabaseService.integration.test.ts -t \"should execute storeTestSuiteResult successfully\" --reporter=verbose)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/services/DatabaseService.integration.test.ts --reporter=json --no-coverage)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/api/ImpactAnalysis.integration.test.ts --reporter=verbose)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/api/ImpactAnalysis.integration.test.ts -t \"should validate impact analysis request parameters\" --reporter=verbose)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/api/MCPToolIntegration.integration.test.ts --reporter=verbose)",
      "Bash(npx tsc:*)",
      "Bash(source .env)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/api/MCPToolIntegration.integration.test.ts -t \"should perform semantic search\")",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/api/MCPToolIntegration.integration.test.ts -t \"should create specification via MCP\")",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/api/MCPToolIntegration.integration.test.ts -t \"should retrieve usage examples\")",
      "WebSearch",
      "WebFetch(domain:docs.falkordb.com)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/models/relationships.integration.test.ts --reporter=verbose)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/models/relationships.integration.test.ts -t \"should handle complex directory structures\" --reporter=verbose)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/api/Performance.integration.test.ts -t \"should maintain performance as load increases\" --reporter=verbose)",
      "Bash(npm install:*)",
      "Bash(pnpm add:*)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/services/DatabaseService.integration.test.ts -t \"should execute falkordbCommand successfully\" --reporter=verbose)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/services/DatabaseService.integration.test.ts -t \"should handle complex falkordbCommand with multiple parameters\" --reporter=verbose)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/services/BackupService.integration.test.ts -t \"should restore from backup successfully\" --reporter=verbose)",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/services/DatabaseService.integration.test.ts -t \"should handle race conditions in concurrent updates\")",
      "Bash(RUN_INTEGRATION=1 NODE_ENV=test npx vitest run tests/integration/services/KnowledgeGraphService.integration.test.ts -t \"should perform structural search by path pattern\" --reporter=verbose)",
      "Bash(npx @repomix/cli:*)",
      "Bash(npx repomix:*)",
      "Bash(mv:*)",
      "Bash(sed:*)",
      "Bash({} ;)",
      "Bash(/Users/Coding/Desktop/sigmachad/src/health-check.ts)",
      "Bash(npm run type-check:*)",
      "Bash(npm run:*)"
    ],
    "deny": [],
    "ask": []
  }
}