/**
 * Knowledge-specific Type Definitions
 * Additional types specific to the knowledge package
 */

import { Entity, Symbol as SymbolEntity } from '@memento/shared-types';
import { GraphRelationship } from '@memento/shared-types';
import type {
  ParseResult,
  ParseError,
  IncrementalParseResult,
  PartialUpdate,
  ChangeRange,
  CachedFileInfo,
  ExportMapEntry,
  ResolvedSymbol,
  BudgetStats,
  CacheStats,
  PartialUpdateStats,
  TypeCheckerUsageOptions,
  SymbolVisibility,
  SymbolKind,
  EntityType,
  IndexManager,
  ParameterInfo,
  FileEntityOptions,
  SymbolEntityOptions,
  DirectoryEntityOptions,
  RelationshipOptions,
  ChangeEvent,
  ChangeFragment,
  QueueConfig,
  QueueMetrics,
  TaskPayload,
  WorkerConfig,
  WorkerMetrics,
  WorkerResult,
  BatchConfig,
  BatchMetadata,
  BatchResult,
  PipelineConfig,
  PipelineMetrics,
  PipelineState,
  DependencyNode,
  DependencyDAG,
  StreamingWriteConfig,
  IdempotentBatch,
  EnrichmentTask,
  EnrichmentResult,
  IngestionTelemetry,
  AlertConfig,
  IngestionError,
  BatchProcessingError,
  WorkerError,
  QueueOverflowError,
  IngestionEvents,
} from '@memento/shared-types';

// Re-export shared types for backward compatibility
export type {
  ParseResult,
  ParseError,
  IncrementalParseResult,
  PartialUpdate,
  ChangeRange,
  CachedFileInfo,
  ExportMapEntry,
  ResolvedSymbol,
  BudgetStats,
  CacheStats,
  PartialUpdateStats,
  TypeCheckerUsageOptions,
  SymbolVisibility,
  SymbolKind,
  EntityType,
  IndexManager,
  ParameterInfo,
  FileEntityOptions,
  SymbolEntityOptions,
  DirectoryEntityOptions,
  RelationshipOptions,
  ChangeEvent,
  ChangeFragment,
  QueueConfig,
  QueueMetrics,
  TaskPayload,
  WorkerConfig,
  WorkerMetrics,
  WorkerResult,
  BatchConfig,
  BatchMetadata,
  BatchResult,
  PipelineConfig,
  PipelineMetrics,
  PipelineState,
  DependencyNode,
  DependencyDAG,
  StreamingWriteConfig,
  IdempotentBatch,
  EnrichmentTask,
  EnrichmentResult,
  IngestionTelemetry,
  AlertConfig,
  IngestionError,
  BatchProcessingError,
  WorkerError,
  QueueOverflowError,
};

export type { IngestionEvents };
