/**
 * Vulnerability Database
 * Manages vulnerability data from various sources (OSV, NVD, etc.)
 */
import { Vulnerability, DependencyInfo } from "./types.js";
export interface VulnerabilitySource {
    name: string;
    url: string;
    ecosystem: string[];
    enabled: boolean;
}
export interface OSVResponse {
    vulns?: OSVVulnerability[];
}
export interface OSVVulnerability {
    id: string;
    summary?: string;
    details?: string;
    aliases?: string[];
    published?: string;
    modified?: string;
    affected?: OSVAffected[];
    severity?: OSVSeverity[];
    database_specific?: {
        severity?: string;
        cve?: string;
    };
}
export interface OSVAffected {
    package?: {
        name?: string;
        ecosystem?: string;
    };
    ranges?: OSVRange[];
}
export interface OSVRange {
    type?: string;
    events?: OSVEvent[];
}
export interface OSVEvent {
    introduced?: string;
    fixed?: string;
}
export interface OSVSeverity {
    type?: string;
    score?: number | string;
}
export declare class VulnerabilityDatabase {
    private cache;
    private sources;
    private readonly CACHE_TTL;
    private cacheTimestamps;
    initialize(): Promise<void>;
    checkVulnerabilities(packageName: string, version: string, ecosystem?: string): Promise<Vulnerability[]>;
    batchCheckVulnerabilities(dependencies: DependencyInfo[]): Promise<Vulnerability[]>;
    updateDatabase(): Promise<void>;
    getStats(): {
        cacheSize: number;
        sources: VulnerabilitySource[];
        lastUpdate: Date | null;
    };
    private loadSources;
    private fetchOSVVulnerabilities;
    private fetchOSVBatch;
    private mapOSVResponse;
    private mapOSVVulnerability;
    private getMockVulnerabilities;
    private isVersionVulnerable;
    private compareVersions;
    private isCacheValid;
    private isOSVEnabled;
    private httpPostJSON;
}
//# sourceMappingURL=vulnerability-db.d.ts.map