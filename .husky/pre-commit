#!/bin/sh

# Run depth validation
echo "🔍 Checking directory depth constraints..."
pnpm tsx scripts/validate-depth.ts

if [ $? -ne 0 ]; then
  echo ""
  echo "❌ Pre-commit check failed: Directory depth exceeds maximum allowed (3 levels)"
  echo ""
  echo "Please refactor deep nested directories before committing."
  echo "Run 'pnpm tsx scripts/validate-depth.ts --fix' for suggestions."
  exit 1
fi

# Run linter only for affected (uncommitted) projects to keep commits fast
echo "📝 Running linter (affected only)..."
pnpm nx affected -t lint --uncommitted

if [ $? -ne 0 ]; then
  echo ""
  echo "❌ Pre-commit check failed: Linting errors found"
  echo ""
  echo "Run 'pnpm lint:fix' to automatically fix some issues."
  exit 1
fi

# Enforce docs coupling for changed packages (before auto-fix)
echo "📎 Checking docs coupling..."
pnpm docs:coupling

# Run security checks
echo "🔒 Running security checks..."

# Quick secrets scan on staged files
echo "🔍 Scanning for secrets..."
# Run a lightweight secrets scan only on staged files
git diff --cached --name-only | xargs -I {} pnpm run -s security:secrets:check:file {}

if [ $? -ne 0 ]; then
  echo ""
  echo "❌ Pre-commit check failed: Secrets detected in staged files"
  echo ""
  echo "Please remove secrets from your code before committing."
  exit 1
fi

# Quick dependency vulnerability check (only if package files changed)
if git diff --cached --name-only | grep -E "(package\.json|pnpm-lock\.yaml|requirements\.txt|Pipfile|Gemfile|pom\.xml|build\.gradle|go\.mod|Cargo\.toml|composer\.json)"; then
  echo "📦 Checking dependencies..."
  pnpm run security:deps:check --quick

  if [ $? -ne 0 ]; then
    echo ""
    echo "⚠️ Warning: Dependency vulnerabilities detected"
    echo ""
    echo "Consider updating vulnerable dependencies."
    # Don't fail the commit for dependency issues, just warn
  fi
fi

# Validate and normalize blueprints (auto-fix, then validate)
echo "📘 Validating blueprint docs..."
pnpm docs:fix >/dev/null 2>&1 || true
pnpm docs:validate

# Generate code summaries (non-blocking)
echo "📚 Generating code summaries..."
bash scripts/generate-code-summaries.sh 2>/dev/null || {
  echo "⚠️  Warning: Could not generate code summaries (non-blocking)"
}

# Add summaries to commit if they exist and changed
if [ -d "Docs/summaries" ]; then
  git add Docs/summaries/*.md 2>/dev/null || true
fi

echo "✅ All pre-commit checks passed!"
